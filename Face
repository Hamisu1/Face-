import os
import zipfile
from PIL import Image, ImageDraw, ImageFont

# Set up directory structure
project_dir = "/mnt/data/FaceRecognitionAttendance"
known_faces_dir = os.path.join(project_dir, "known_faces")
os.makedirs(known_faces_dir, exist_ok=True)

# Sample face image (simulated)
def create_sample_face_image(name, file_path):
    img = Image.new('RGB', (250, 250), color=(155, 200, 200))
    d = ImageDraw.Draw(img)
    d.rectangle([70, 50, 180, 160], outline="black", width=4)
    d.text((60, 200), name, fill="black")
    img.save(file_path)

# Create sample face images
create_sample_face_image("John_Doe", os.path.join(known_faces_dir, "John_Doe.jpg"))
create_sample_face_image("Sarah_Musa", os.path.join(known_faces_dir, "Sarah_Musa.jpg"))

# Create attendance.csv file
with open(os.path.join(project_dir, "attendance.csv"), "w") as f:
    f.write("Name,Date,Time\n")

# Create attend.py
code = '''import face_recognition
import cv2
import numpy as np
import os
from datetime import datetime
import pandas as pd

path = 'known_faces'
images = []
classNames = []
myList = os.listdir(path)

for cl in myList:
    img = cv2.imread(f'{path}/{cl}')
    images.append(img)
    classNames.append(os.path.splitext(cl)[0])

def find_encodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)
        if encode:
            encodeList.append(encode[0])
    return encodeList

def mark_attendance(name):
    try:
        df = pd.read_csv('attendance.csv')
    except:
        df = pd.DataFrame(columns=["Name", "Date", "Time"])

    now = datetime.now()
    dt_string = now.strftime('%Y-%m-%d'), now.strftime('%H:%M:%S')

    if not ((df['Name'] == name) & (df['Date'] == dt_string[0])).any():
        new_entry = pd.DataFrame([[name, dt_string[0], dt_string[1]]], columns=["Name", "Date", "Time"])
        df = pd.concat([df, new_entry], ignore_index=True)
        df.to_csv('attendance.csv', index=False)

encodeListKnown = find_encodings(images)
print('Encoding Complete...')

cap = cv2.VideoCapture(0)

while True:
    success, img = cap.read()
    imgSmall = cv2.resize(img, (0, 0), fx=0.25, fy=0.25)
    imgSmall = cv2.cvtColor(imgSmall, cv2.COLOR_BGR2RGB)

    facesCurFrame = face_recognition.face_locations(imgSmall)
    encodesCurFrame = face_recognition.face_encodings(imgSmall, facesCurFrame)

    for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
        faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)

        matchIndex = np.argmin(faceDis)
        if matches[matchIndex]:
            name = classNames[matchIndex].upper()
            y1, x2, y2, x1 = faceLoc
            y1, x2, y2, x1 = y1*4, x2*4, y2*4, x1*4

            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
            cv2.putText(img, name, (x1+6, y2-6), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            mark_attendance(name)

    cv2.imshow('Webcam', img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
'''
with open(os.path.join(project_dir, "attend.py"), "w") as f:
    f.write(code)

# Zip the folder
zip_path = "/mnt/data/FaceRecognitionAttendance.zip"
with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
    for root, _, files in os.walk(project_dir):
        for file in files:
            file_path = os.path.join(root, file)
            zipf.write(file_path, os.path.relpath(file_path, project_dir))

zip_path
